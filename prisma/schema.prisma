// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  budgets       Budget[]
  transactions  Transaction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Budget {
  id           String   @id @default(cuid())
  userId       String
  totalIncome  Float
  month        Int
  year         Int
  interestRate Float    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories BudgetCategory[]

  @@unique([userId, month, year])
}

model BudgetCategory {
  id           String        @id @default(cuid())
  budgetId     String
  name         String
  amount       Float
  limit        Float?
  budget       Budget        @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([budgetId, name])
}

model Transaction {
  id                String   @id @default(cuid())
  userId            String
  amount            Float
  description       String
  date              DateTime
  categoryId        String?
  isAutoCategorized Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  category BudgetCategory? @relation(fields: [categoryId], references: [id])
}
